use crate::parser::ast::*;
use crate::parser::air_parser::make_flattened_error;
use crate::parser::air_parser::make_stream_iterable_error;
use crate::parser::ParserError;
use crate::parser::VariableValidator;
use crate::parser::Span;
use crate::parser::lexer::Token;
use crate::parser::lexer::Number;
use crate::parser::lexer::LastErrorPath;
use crate::parser::lexer::Variable;

use lalrpop_util::ErrorRecovery;
use std::rc::Rc;

// the only thing why input matters here is just introducing lifetime for Token
grammar<'err, 'input, 'v>(input: &'input str, errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, ParserError>>, validator: &'v mut VariableValidator<'input>);

pub AIR = Instr;

Instr: Box<Instruction<'input>> = {
    <left: @L> "(" call <peer_part:PeerPart> <function_part:FPart> <args:Args> <output:Output?> ")" <right: @R> => {
        let output = output.unwrap_or(CallOutputValue::None);
        let args = Rc::new(args);
        let call = Call { peer_part, function_part, args, output };
        let span = Span { left, right };
        validator.met_call(&call, span);

        Box::new(Instruction::Call(call))
    },

    "(" seq <l:Instr> <r:Instr> ")" => Box::new(Instruction::Seq(Seq(l, r))),
    "(" par <l:Instr> <r:Instr> ")" => Box::new(Instruction::Par(Par(l, r))),
    "(" null ")" => Box::new(Instruction::Null(Null)),

    <left: @L> "(" fold <iterable:ScalarIterable> <iterator:Alphanumeric> <i:Instr> ")" <right: @R> => {
        let instruction = Rc::new(*i);
        let fold = FoldScalar { iterable, iterator, instruction };
        let span = Span { left, right };
        validator.met_fold_scalar(&fold, span);

        Box::new(Instruction::FoldScalar(fold))
    },

    <left: @L> "(" fold <stream:Stream> <iterator:Alphanumeric> <i:Instr> ")" <right: @R> => {
        let instruction = Rc::new(*i);
        let id = create_fold_id(stream, left);
        let fold = FoldStream { stream_name: stream, id, iterator, instruction };
        let span = Span { left, right };
        validator.met_fold_stream(&fold, span);

        Box::new(Instruction::FoldStream(fold))
    },

    <left: @L> "(" next <i:Alphanumeric> ")" <right: @R> => {
        let next = Next(i);
        let span = Span { left, right };
        validator.met_next(&next, span);

        Box::new(Instruction::Next(next))
    },

    "(" xor <l:Instr> <r:Instr> ")" => Box::new(Instruction::Xor(Xor(l, r))),

    <left: @L> "(" match_ <l:Matchable> <r:Matchable> <i:Instr> ")" <right: @R> => {
        let match_ = Match { left_value: l, right_value: r, instruction: i};
        let span = Span { left, right };
        validator.met_match(&match_, span);

        Box::new(Instruction::Match(match_))
    },

    <left: @L> "(" mismatch <l:Matchable> <r:Matchable> <i:Instr> ")" <right: @R> => {
        let mismatch = MisMatch { left_value: l, right_value: r, instruction: i};
        let span = Span { left, right };
        validator.met_mismatch(&mismatch, span);

        Box::new(Instruction::MisMatch(mismatch))
     },

    ! => { errors.push(<>); Box::new(Instruction::Error) },
}

Args: Vec<CallInstrArgValue<'input>> = {
    "[" <args:(<Arg>)*> "]" => args
}

FPart: FunctionPart<'input> = {
    <f:Function> => FunctionPart::FuncName(f),
    "(" <sid:ServiceId> <f:Function> ")" => FunctionPart::ServiceIdWithFuncName(sid, f),
}

PeerPart: PeerPart<'input> = {
    <pid:PeerId> => PeerPart::PeerPk(pid),
    "(" <pid:PeerId> <sid:ServiceId> ")" => PeerPart::PeerPkWithServiceId(pid, sid),
}

Output: CallOutputValue<'input> = {
    <a:Alphanumeric> => CallOutputValue::Variable(Variable::Scalar(a)),
    <s:Stream> => CallOutputValue::Variable(Variable::Stream(s)),
};

Function = CallInstrValue;
PeerId = CallInstrValue;
ServiceId = CallInstrValue;

CallInstrValue: CallInstrValue<'input> = {
    <l:Literal> => CallInstrValue::Literal(l),
    <a:Alphanumeric> => CallInstrValue::Variable(Variable::Scalar(a)),
    <s:Stream> => CallInstrValue::Variable(Variable::Stream(s)),
    <l: @L> <j:JsonPath> <r: @R> => {
        let variable = j.0;
        let path = j.1;
        let should_flatten = j.2;
        // Due the json path constraints json path should be flattened in a call triplet.
        if !should_flatten {
            let token = Token::VariableWithJsonPath(variable.clone(), path, should_flatten);
            errors.push(make_flattened_error(l, token, r));
        }
        CallInstrValue::JsonPath { variable, path, should_flatten }
    },
    InitPeerId => CallInstrValue::InitPeerId,
}

Arg = CallInstrArgValue;

CallInstrArgValue: CallInstrArgValue<'input> = {
    <s:Literal> => CallInstrArgValue::Literal(s),
    <v:Alphanumeric> => CallInstrArgValue::Variable(Variable::Scalar(v)),
    <v:Stream> => CallInstrArgValue::Variable(Variable::Stream(v)),
    <j:JsonPath> => CallInstrArgValue::JsonPath { variable: j.0, path: j.1, should_flatten: j.2 },
    <n:Number> => CallInstrArgValue::Number(n),
    <b:Boolean> => CallInstrArgValue::Boolean(b),
    InitPeerId => CallInstrArgValue::InitPeerId,
    <p:LastError> => CallInstrArgValue::LastError(p),
}

ScalarIterable: IterableScalarValue<'input> = {
    <v:Alphanumeric> => IterableScalarValue::ScalarVariable(v),
    <l:@L> <j:JsonPath> <r:@R> => {
        use crate::parser::air::Variable::*;

        let variable = j.0;
        let scalar_name = match variable {
            Stream(name) => {
                let token = Token::VariableWithJsonPath(variable, j.1, j.2);
                errors.push(make_stream_iterable_error(l, token, r));
                name
            }
            Scalar(name) => name,
        };
        IterableScalarValue::JsonPath { scalar_name, path: j.1, should_flatten: j.2 }
    }
}

Matchable: MatchableValue<'input> = {
    InitPeerId => MatchableValue::InitPeerId,
    <v:Alphanumeric> => MatchableValue::Variable(Variable::Scalar(v)),
    <v:Stream> => MatchableValue::Variable(Variable::Stream(v)),
    <s:Literal> => MatchableValue::Literal(s),
    <b:Boolean> => MatchableValue::Boolean(b),
    <n:Number> => MatchableValue::Number(n),
    <j:JsonPath> => MatchableValue::JsonPath { variable: j.0, path: j.1, should_flatten: j.2 },
}

extern {
    type Location = usize;
    type Error = ParserError;

    enum Token<'input> {
        "(" => Token::OpenRoundBracket,
        ")" => Token::CloseRoundBracket,
        "[" => Token::OpenSquareBracket,
        "]" => Token::CloseSquareBracket,

        Literal => Token::StringLiteral(<&'input str>),
        Alphanumeric => Token::Alphanumeric(<&'input str>),
        Stream => Token::Stream(<&'input str>),
        JsonPath => Token::VariableWithJsonPath(<Variable<'input>>, <&'input str>, <bool>),
        Number => Token::Number(<Number>),
        Boolean => Token::Boolean(<bool>),

        InitPeerId => Token::InitPeerId,
        LastError => Token::LastError(<LastErrorPath>),

        call => Token::Call,
        seq => Token::Seq,
        par => Token::Par,
        null => Token::Null,
        fold => Token::Fold,
        xor => Token::Xor,
        next => Token::Next,
        match_ => Token::Match,
        mismatch => Token::MisMatch,
    }
}
